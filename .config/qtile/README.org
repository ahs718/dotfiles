#+title: Qtile configuration
#+property: header-args :tangle config.py
Qtile is a window manager that is written and configured in python.
Official documentation: https://docs.qtile.org/en/stable/

This is my Qtile configuration!
* Imports
These are the qtile libraries in python that allow for the customization of the window manager.

#+begin_src python
#   layout objects
from libqtile.layout.columns import Columns
from libqtile.layout.xmonad import MonadTall
from libqtile.layout.stack import Stack
from libqtile.layout.floating import Floating

#   widgets and bar
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.bar import Bar
from libqtile.widget.groupbox import GroupBox
from libqtile.widget.currentlayout import CurrentLayout
from libqtile.widget.window_count import WindowCount
from libqtile.widget.windowname import WindowName
from libqtile.widget.volume import Volume
from libqtile.widget.net import Net
from libqtile.widget.systray import Systray
from libqtile.widget.clock import Clock
from libqtile.widget.spacer import Spacer
from libqtile.widget.prompt import Prompt
#+end_src
* Colorscheme
This section includes a dictionary that stores color hex codes for the catppuccin color scheme. This color scheme is also present in additional configurations for the programs that I use.
#+begin_src python
catppuccin = {
    "lavender": "#C9CBFF",
    "mauve": "#DDB6F2",
    "pink": "#F5C2E7",
    "flamingo": "#F2CDCD",
    "rosewater": "#F5E0DC",
    "blue": "#96CDFB",
    "sky": "#89DCEB",
    "teal": "#B5E8E0",
    "red": "#F28FAD",
    "maroon": "#E8A2AF",
    "peach": "#F8BD96",
    "yellow": "#FAE3B0",
    "green": "#ABE9B3",
    "black0": "#161320",
    "black1": "#1A1826",
    "black2": "#1E1E2E",
    "black3": "#302D41",
    "black4": "#575268",
    "gray0": "#6E6C7E",
    "gray1": "#988BA2",
    "gray2": "#C3BAC6",
    "white": "#D9E0EE",
}
#+end_src
* Keybindings
Contains all of the keybindings for launching/switching applications, window management, and media playback.
#+begin_src python
mod = "mod4"
terminal = "alacritty"
keys = [
    # Launch applications
    Key([mod], "a", lazy.spawn("firefox"), desc="Launch firefox"),
    Key([mod], "d", lazy.spawn("discord"), desc="Launch discord"),
    Key([mod], "t", lazy.spawn("thunderbird"), desc="Launch thunderbird"),
    Key([mod], "s", lazy.group[4].toscreen(), lazy.spawn("spotify"), desc="Launch spotify"),
    Key([mod], "i", lazy.spawn("idea"), desc="Launch Java IDE"),
    Key([mod], "c", lazy.spawn("code"), desc="Launch vscode"),
    Key([mod], 'p', lazy.spawn('rofi -show drun'), desc="Launch rofi menu"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),

    # Volume control
    Key([], "XF86AudioLowerVolume", lazy.spawn("amixer set Master 5%- unmute")),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("amixer set Master 5%+ unmute")),
    Key([], "XF86AudioMute", lazy.spawn("amixer set Master togglemute")),
    Key([], "XF86AudioMicMute", lazy.spawn("amixer set Capture togglemute")),
    # Audio
    Key([], "XF86AudioNext", lazy.spawn("playerctl -a next")),
    Key([], "XF86AudioPrev", lazy.spawn("playerctl -a previous")),
    Key([], "XF86AudioPlay", lazy.spawn("playerctl -a play-pause")),

    # Toggle floating and fullscreen
    Key([mod], "f", lazy.window.toggle_fullscreen(), desc="Toggle fullscreen mode"),
    Key([mod, "shift"], "space", lazy.window.toggle_floating(), desc="Toggle floating mode"),

    # Switch between windows
    Key([mod], "Left", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "Right", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "Down", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "Up", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),

    # Move windows between left/right columns or move up/down in current stack.
    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),

    # Grow windows
    Key([mod, "control"], "Left", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "Right", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "Up", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),

    # Toggle between split and unsplit sides of stack.
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(), desc="Toggle between split and unsplit sides of stack"),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
]
#+end_src
* Workspaces
Contains all of the workspaces along with their labels. Additionally, window parameters are included to always open application in specific window groups.
#+begin_src python
groups = [
    Group(name="1", label="", matches=[Match(wm_class="firefox")], layout="stack"),
    Group(name="2", label="", matches=[Match(wm_class="code-oss"), Match(wm_class="jetbrains-idea-ce")], layout="monadtall"),
    Group(name="3", label="", matches=[Match(wm_class="Mail")], layout="monadtall"),
    Group(name="4", label="", matches=[Match(wm_class="Steam")], layout="stack"),
    Group(name="5", label="", matches=[Match(wm_class="discord")], layout="monadtall"),
]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key([mod], i.name, lazy.group[i.name].toscreen(), desc="Switch to group {}".format(i.name)),
            # mod1 + shift + letter of group = move focused window to group
            Key([mod, "shift"], i.name, lazy.window.togroup(i.name), desc="move focused window to group {}".format(i.name)),
        ]
    )
#+end_src
* Tiling/Floating Layouts
Contains all of the different layout options for windows to be displayed in. Each layout organizes windows in a different way. Additionally, a floating layout is included for programs that are not necessary to be opened in the current tiling layout. These floating windows are able to be moved by the mouse. Window names are specified in certain parameters to always be opened in a floating layout.
#+begin_src python
# Tiling Layouts
layouts = [
    Stack(
        border_normal=catppuccin["gray0"],
        border_focus=catppuccin["blue"],
        border_width=2,
        num_stacks=1,
        margin=10,
    ),
    MonadTall(
        border_normal=catppuccin["gray0"],
        border_focus=catppuccin["blue"],
        margin=10,
        border_width=2,
        single_border_width=2,
        single_margin=10,
    ),
    Columns(
        border_normal=catppuccin["gray0"],
        border_focus=catppuccin["blue"],
        border_width=2,
        border_normal_stack=catppuccin["gray0"],
        border_focus_stack=catppuccin["sky"],
        border_on_single=2,
        margin=10,
        margin_on_single=10,
    ),
]

# Floating Layout
floating_layout = Floating(
    border_normal=catppuccin["gray0"],
    border_focus=catppuccin["red"],
    border_width=3,
    float_rules=[
        ,*Floating.default_float_rules,
        Match(wm_class="bitwarden"),
        Match(wm_class="Thunar"),
    ],
)

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]
#+end_src
* Font, Monitor Layout, and Extras
This section includes the default font to be used for all Qtile widgets, specifcally the qtile bar. Additionally, two bars are included to be displayed for each monitor. Lastly, there are other behavioral settings that are enabled, such as the ability to switch focus between windows via hovering the mouse.
#+begin_src python

widget_defaults = dict(
    font="Caskaydia Cove Nerd Font Mono",
    fontsize=16,
    padding=10,
    foreground=catppuccin["black1"],
)

extension_defaults = widget_defaults.copy()

screens = [
    Screen(top=bar2),
    Screen(top=bar1),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = ""
cursor_warp = False
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True
auto_minimize = True
wmname = "LG3D"
#+end_src
* Left Bar
Configures the first bar object to display various widgets. The widgets in my configuration include:
- GroupBox: displays workspaces
- CurrentLayout : displays current window layout
- WindowCount : displays the number of open windows
- Clock : dislays the current time
- Prompt : prompts user for input (not able to be interacted with due to integration with the rofi app launcher)
- WindowName : displays the focused window title
- Systray : adds an interactive system tray
- Volume : displays current volume percentage with the ability to change the volume by using the scroll wheel while hovering over the icon. Additionally, offers the ability to mute when left clicking the icon.
- Net : displays the current internet upload and download speed.
#+begin_src python
bar1 = Bar(
    [
        GroupBox(
            disable_drag=True,
            active=catppuccin["gray2"],
            inactive=catppuccin["gray0"],
            highlight_method="line",
            block_highlight_text_color=catppuccin["lavender"],
            borderwidth=0,
            highlight_color=catppuccin["black1"],
            background=catppuccin["black1"],
        ),
        Spacer(length=30),
        CurrentLayout(
            background=catppuccin["black1"],
            foreground=catppuccin["lavender"]
        ),
        Spacer(length=30),
        WindowCount(
            text_format="缾 {num}",
            background=catppuccin["black1"],
            foreground=catppuccin["mauve"],
            show_zero=True,
        ),
        Spacer(length=30),
        Clock(background=catppuccin["black1"], format=" %a %I:%M %p %m-%d-%Y", foreground=catppuccin["pink"]),
        Spacer(length=30),
        Prompt(foreground=catppuccin["black1"]),
        WindowName(foreground=catppuccin["white"]),
        Spacer(length=100),
        Systray(
            padding=15,
        ),
        Spacer(length=30),
        Volume(fmt="Volume: {}", background=catppuccin["black1"], foreground=catppuccin["blue"]),
        Spacer(length=30),
        Net(background=catppuccin["black1"], foreground=catppuccin["sky"]),
    ],
    margin=[10, 10, 5, 10],
    background=catppuccin["black1"],
    opacity=0.85,
    size=25,
)
#+end_src
* Right bar
Configures the other bar object to display various widgets. The widgets in my configuration include:
- GroupBox: displays workspaces
- CurrentLayout : displays current window layout
- WindowCount : displays the number of open windows
- Clock : dislays the current time
- WindowName : displays the focused window title
- Volume : displays current volume percentage with the ability to change the volume by using the scroll wheel while hovering over the icon. Additionally, offers the ability to mute when left clicking the icon.
- Net : displays the current internet upload and download speed.i
#+begin_src python
bar2 = Bar(
    [
        GroupBox(
            disable_drag=True,
            active=catppuccin["gray2"],
            inactive=catppuccin["gray0"],
            highlight_method="line",
            block_highlight_text_color=catppuccin["lavender"],
            borderwidth=0,
            highlight_color=catppuccin["black1"],
            background=catppuccin["black1"],
        ),
        Spacer(length=30),
        CurrentLayout(
            background=catppuccin["black1"],
            foreground=catppuccin["lavender"],
        ),
        Spacer(length=30),
        WindowCount(
            text_format="缾 {num}",
            background=catppuccin["black1"],
            foreground=catppuccin["mauve"],
            show_zero=True,
        ),
        Spacer(length=30),
        Clock(background=catppuccin["black1"], format=" %a %I:%M %p %m-%d-%Y", foreground=catppuccin["pink"]),
        Spacer(length=30),
        WindowName(foreground=catppuccin["white"]),
        Spacer(length=30),
        Volume(fmt="Volume: {}", background=catppuccin["black1"], foreground=catppuccin["blue"]),
        Spacer(length=30),
        Net(background=catppuccin["black1"], foreground=catppuccin["sky"]),
    ],
    margin=[10, 10, 5, 10],
    background=catppuccin["black1"],
    opacity=0.85,
    size=25,
)
#+end_src
